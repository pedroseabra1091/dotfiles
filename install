#!/bin/bash

BLUE='\033[1;34m'
GREEN='\033[1;32m'
RED='\033[0;31m'
RESET='\033[0m'

function xecho {
  echo "\n$1[$2]: $3"
}

function xecho_info {
  xecho "$BLUE" "$1" "$2"
}

function xecho_success {
  xecho "$GREEN" "$1" "$2"
}

function xecho_error {
  xecho "$RED" "$1" "$2"
}

if ! [ $(command -v brew) ]; then
  xecho_info "install" "Installing brew"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
  xecho_info "update" "Update brew"
  brew update
fi

xecho_info "brew" "Setup brew path"
if uname -a | grep -q arm; then
  export PATH="/opt/homebrew/bin:$PATH"
else
  export PATH="/usr/local/bin:$PATH"
fi

xecho_info "brew" "Bundling formulaes & casks"
brew bundle install

xecho_info "zsh" "Install oh-my-zsh"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

xecho_info "zsh" "Install p10k"
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.powerlevel10k

xecho_info "zsh" "Symlink p10k config"
ln -s -i $(pwd)/p10k/p10k.zsh.symlink ~/.p10k.zsh

xecho_info "zsh" "Switching shell to ZSH"
exec zsh

xecho_info "zsh" "Symlink zshrc"
ln -s -i $(pwd)/zsh/zshrc.symlink ~/.zshrc
source ~/.zshrc

xecho_info "asdf" "Adding ASDF plugins"
asdf plugin-add elixir
asdf plugin-add erlang
asdf plugin-add kubectl
asdf plugin-add nodejs
asdf plugin-add postgres
asdf plugin-add redis
asdf plugin-add ruby

xecho_info "asdf" "Symlink .tool-versions"
ln -s -i $(pwd)/asdf/tool-versions.symlink ~/.tool-versions
(cd ~/ && asdf install)

xecho_info "asdf" "Symlink .asdf-postgres—configure-options"
ln -s -i $(pwd)/asdf/asdf-postgres-configure-options.symlink ~/.asdf-postgres-configure-options

xecho_info "git" "Symlink .gitconfig"
ln -s -i $(pwd)/git/gitconfig.symlink ~/.gitconfig

xecho_info "code" "Symlink keybindings.json"
ln -s -i $(pwd)/code/keybindings.json.symlink  ~/Library/Application\ Support/Code/User/keybindings.json

xecho_info "code" "Symlink settings.json"
ln -s -i $(pwd)/code/settings.json.symlink  ~/Library/Application\ Support/Code/User/settings.json

if ! [ $(command -v code) ]; then
  cat code/vscode-extensions.list | grep -v '^#' | xargs -L1 code --install-extension
  xecho_info "code" "Installing extensions"
else
  xecho_error "code" "Couldn't install extensions"
fi

if [ -d "~/.config/karabiner" ]; then
  xecho_info "karabiner" "Symlink karabiner.json"
  ln -s -i $(pwd)/karabiner/karabiner.json.symlink ~/.config/karabiner/karabiner.json
else
  xecho_error "karabiner" "Couldn't symlink karabiner configuration – Repeat execution once access privileges are granted to Karabiner."
fi

xecho_info "OSX" "Customize dock"
defaults delete com.apple.dock recent-apps
defaults delete com.apple.dock persistent-others

dock_item() {
    printf '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>%s</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>', "$1"
}

defaults write com.apple.dock persistent-apps -array \
    "$(dock_item /Applications/Firefox.app)" \
    "$(dock_item /Applications/Spark\ Desktop.app)" \
    "$(dock_item /Applications/Warp.app)" \
    "$(dock_item /Applications/Slack.app)" \
    "$(dock_item /Applications/Visual\ Studio\ Code.app)" \
    "$(dock_item /Applications/Postico\ 2.app/)" \
    "$(dock_item /Applications/Obsidian.app)" \
    "$(dock_item /Applications/Notion.app)"

killall Dock